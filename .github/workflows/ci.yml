name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m -Dmaven.project.sourceRoots.warningsDisabled=true'

# Global permissions
permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write
  actions: read

jobs:
  # 1Ô∏è‚É£ Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Verify setup
        run: |
          echo "üîç Environment Information:"
          echo "Java version: $(java -version 2>&1 | head -1)"
          echo "Maven version: $(mvn --version | head -1)"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "Maven opts: $MAVEN_OPTS"

      - name: Build project
        run: |
          mvn -B clean compile \
            -Dmaven.compiler.source=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.release=${{ env.JAVA_VERSION }} \
            -Dmaven.project.sourceRoots.warningsDisabled=true

      - name: Run tests with coverage
        run: |
          mvn -B test jacoco:report \
            -Dmaven.compiler.source=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.release=${{ env.JAVA_VERSION }} \
            -Dmaven.project.sourceRoots.warningsDisabled=true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            target/surefire-reports/*.xml
          check_name: "Maven Test Results"
          comment_mode: always
          comment_title: "Unit Test Results"
          fail_on: "test failures"
          action_fail: false

      - name: Add coverage to PR
        uses: madrapps/jacoco-report@v1.6.1
        if: github.event_name == 'pull_request'
        with:
          paths: |
            ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 70
          min-coverage-changed-files: 70
          title: "Code Coverage Report"
        continue-on-error: true

      - name: Package application
        run: |
          mvn -B package -DskipTests \
            -Dmaven.compiler.source=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.release=${{ env.JAVA_VERSION }} \
            -Dmaven.project.sourceRoots.warningsDisabled=true

      - name: Extract version
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Application Version: $VERSION"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/*.jar
            target/site/jacoco/
          retention-days: 7

      - name: Build Summary
        if: always()
        run: |
          echo "## üìä Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Java Version | ${{ env.JAVA_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Application Version | ${{ steps.version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f target/surefire-reports/TEST-*.xml ]; then
            echo "| Test Reports | ‚úÖ Generated |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Test Reports | ‚ùå Not Found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f target/site/jacoco/jacoco.xml ]; then
            echo "| Coverage Report | ‚úÖ Generated |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Coverage Report | ‚ùå Not Found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìÅ Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
          ls -la target/ >> $GITHUB_STEP_SUMMARY || true

  # 2Ô∏è‚É£ Code Quality Analysis (Improved SonarCloud handling)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.actor != 'dependabot[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target/

      - name: Check SonarCloud configuration
        id: sonar-check
        run: |
          if [ -n "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "sonar_enabled=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SonarCloud token found - analysis will run"
          else
            echo "sonar_enabled=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è SonarCloud token not found - running basic analysis instead"
          fi

      - name: Setup SonarCloud configuration
        if: steps.sonar-check.outputs.sonar_enabled == 'true'
        id: sonar-setup
        run: |
          # Extract repository information
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          REPO_FULL="${{ github.repository }}"
          
          echo "Repository Owner: $REPO_OWNER"
          echo "Repository Name: $REPO_NAME"
          echo "Full Repository: $REPO_FULL"
          
          # Try different project key formats (most common SonarCloud patterns)
          # Format 1: GitHub repository format (owner/repo) - most common
          PROJECT_KEY_1="$REPO_FULL"
          # Format 2: Underscore format (owner_repo)
          PROJECT_KEY_2="${REPO_OWNER}_${REPO_NAME}"
          # Format 3: Simple repo name
          PROJECT_KEY_3="$REPO_NAME"
          
          echo "Possible project keys:"
          echo "  1. $PROJECT_KEY_1 (GitHub format - recommended)"
          echo "  2. $PROJECT_KEY_2 (Underscore format)"
          echo "  3. $PROJECT_KEY_3 (Simple name)"
          
          # Use GitHub repository format as default (most common in SonarCloud)
          echo "project_key=$PROJECT_KEY_1" >> $GITHUB_OUTPUT
          echo "organization=$REPO_OWNER" >> $GITHUB_OUTPUT
          
          echo "Using:"
          echo "  Project Key: $PROJECT_KEY_1"
          echo "  Organization: $REPO_OWNER"


      - name: Run basic code analysis
        if: steps.sonar-check.outputs.sonar_enabled == 'false' || (steps.sonar-check.outputs.sonar_enabled == 'true' && steps.sonar-validate.outputs.sonar_success != 'true')
        run: |
          echo "üîç Running basic code analysis..."
          
          # Count lines of code
          echo "## üìà Code Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          JAVA_FILES=$(find src -name "*.java" 2>/dev/null | wc -l || echo "0")
          JAVA_LINES=$(find src -name "*.java" -exec cat {} \; 2>/dev/null | wc -l || echo "0")
          TEST_FILES=$(find src/test -name "*.java" 2>/dev/null | wc -l || echo "0")
          
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Java Files | $JAVA_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "| Lines of Code | $JAVA_LINES |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Files | $TEST_FILES |" >> $GITHUB_STEP_SUMMARY
          
          # Check if coverage report exists
          if [ -f target/site/jacoco/jacoco.xml ]; then
            echo "| Coverage Data | ‚úÖ Available |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Coverage Data | ‚ùå Not Available |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.sonar-check.outputs.sonar_enabled }}" == "false" ]; then
            echo "üí° **Setup SonarCloud for detailed analysis:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Visit [sonarcloud.io](https://sonarcloud.io)" >> $GITHUB_STEP_SUMMARY
            echo "2. Import this repository" >> $GITHUB_STEP_SUMMARY
            echo "3. Add \`SONAR_TOKEN\` to repository secrets" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "‚úÖ Basic code analysis completed"

  # 3Ô∏è‚É£ Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (display)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
        continue-on-error: true

      - name: Check SARIF file
        id: sarif-check
        run: |
          if [ -f trivy-results.sarif ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SARIF file generated successfully"
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è SARIF file not generated"
            touch trivy-results.sarif
          fi

      - name: Upload Trivy scan results
        if: steps.sarif-check.outputs.sarif_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Security summary
        run: |
          echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Scanner**: Trivy" >> $GITHUB_STEP_SUMMARY
          echo "- **Scope**: Filesystem dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- **Severity**: CRITICAL, HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- **SARIF Upload**: ${{ steps.sarif-check.outputs.sarif_exists == 'true' && '‚úÖ Success' || '‚ö†Ô∏è Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üí° **Tip**: Enable GitHub Code Scanning in repository settings for advanced security analysis" >> $GITHUB_STEP_SUMMARY

  # 4Ô∏è‚É£ Docker Build and Push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target/

      - name: Verify Dockerfile exists
        id: dockerfile-check
        run: |
          if [ -f Dockerfile ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Dockerfile found"
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Dockerfile not found - skipping Docker build"
          fi

      - name: Set up Docker Buildx
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Check Docker Hub credentials
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        id: docker-check
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "docker_enabled=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Docker Hub credentials found - will push to registry"
          else
            echo "docker_enabled=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Docker Hub credentials not found - will build locally only"
          fi

      - name: Log in to Docker Hub
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true' && steps.docker-check.outputs.docker_enabled == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME || 'local' }}/myapp
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.build-and-test.outputs.version }}

      - name: Build Docker image
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        run: |
          echo "üß™ Testing Docker image..."
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME || 'local' }}/myapp:latest"
          echo "Testing image: $IMAGE_NAME"
          
          # Test if image runs (will exit quickly for Spring Boot without proper config)
          timeout 10 docker run --rm $IMAGE_NAME || echo "Image test completed (expected to exit)"

      - name: Push Docker image
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true' && steps.docker-check.outputs.docker_enabled == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Docker summary
        run: |
          echo "## üê≥ Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.dockerfile-check.outputs.dockerfile_exists }}" == "true" ]; then
            echo "| Dockerfile | ‚úÖ Found |" >> $GITHUB_STEP_SUMMARY
            echo "| Image Built | ‚úÖ Yes |" >> $GITHUB_STEP_SUMMARY
            echo "| Pushed to Registry | ${{ steps.docker-check.outputs.docker_enabled == 'true' && '‚úÖ Yes' || '‚ö†Ô∏è Local only' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Platforms | linux/amd64, linux/arm64 |" >> $GITHUB_STEP_SUMMARY
            echo "| Version | ${{ needs.build-and-test.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Dockerfile | ‚ùå Missing |" >> $GITHUB_STEP_SUMMARY
            echo "| Image Built | ‚ùå Skipped |" >> $GITHUB_STEP_SUMMARY
            echo "| Status | ‚ö†Ô∏è Add Dockerfile to enable Docker builds |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.dockerfile-check.outputs.dockerfile_exists }}" != "true" ]; then
            echo "üí° **Tip**: Add a Dockerfile to the repository root to enable Docker builds" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.docker-check.outputs.docker_enabled }}" != "true" ]; then
            echo "üí° **Tip**: Add DOCKERHUB_USERNAME and DOCKERHUB_TOKEN to repository secrets to enable Docker Hub publishing" >> $GITHUB_STEP_SUMMARY
          fi

  # 5Ô∏è‚É£ Build Status Summary
  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan]
    if: always()

    steps:
      - name: Overall build status
        run: |
          echo "## üéØ Pipeline Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-and-test.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '‚úÖ Passed' || needs.code-quality.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ github.ref == 'refs/heads/main' && 'üê≥ Triggered' || '‚è≠Ô∏è Skipped (not main)' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" != "success" ]; then
            echo "‚ùå **Build failed** - Check the Build and Test job for details"
            exit 1
          else
            echo "üéâ **Build successful** - All core checks passed!"
          fi