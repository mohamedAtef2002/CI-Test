name: Java Spring Boot CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository -Xmx3072m -XX:MaxPermSize=512m'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Static Analysis
  code-quality:
    name: Code Quality & Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for SonarCloud analysis

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Validate Maven project
        run: mvn validate

      - name: Compile project
        run: mvn clean compile -DskipTests

      # Run Checkstyle for code style
      - name: Run Checkstyle
        run: mvn checkstyle:check -Dcheckstyle.config.location=checkstyle.xml
        continue-on-error: true

      # Run SpotBugs for static analysis
      - name: Run SpotBugs
        run: mvn spotbugs:check -Dspotbugs.effort=Max -Dspotbugs.threshold=Low
        continue-on-error: true

      # Run PMD for code analysis
      - name: Run PMD
        run: mvn pmd:check pmd:cpd-check
        continue-on-error: true

      # SonarCloud Analysis
      - name: Run SonarCloud Analysis
        run: |
          mvn verify sonar:sonar \
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }} \
            -Dsonar.organization=${{ github.repository_owner }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.java.source=21 \
            -Dsonar.exclusions=**/target/**,**/generated-sources/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Upload SpotBugs results
      - name: Upload SpotBugs results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spotbugs-results
          path: target/spotbugsXml.xml

  # Job 2: Build and Unit Tests
  build-and-test:
    name: Build & Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality

    strategy:
      matrix:
        java-version: [21]
        profile: [test, integration-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with Maven
        run: mvn clean test -P${{ matrix.profile }} -Dmaven.test.failure.ignore=false
        env:
          SPRING_PROFILES_ACTIVE: ${{ matrix.profile }}

      - name: Generate test report
        run: mvn surefire-report:report
        if: always()

      - name: Generate JaCoCo coverage report
        run: mvn jacoco:report

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.profile }}
          path: |
            target/surefire-reports/
            target/site/jacoco/

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run integration tests
        run: mvn verify -Pintegration-test -DskipUnitTests=true
        env:
          SPRING_PROFILES_ACTIVE: integration-test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpass
          SPRING_REDIS_HOST: localhost
          SPRING_REDIS_PORT: 6379

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: target/failsafe-reports/

  # Job 4: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7
        continue-on-error: true

      # Snyk Security Scan
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build for CodeQL
        run: mvn clean compile -DskipTests

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload OWASP dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-reports
          path: target/dependency-check-report.html

  # Job 5: Build Docker Image
  docker-build:
    name: Build & Scan Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Build application
        run: mvn clean package -DskipTests -Pproduction

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            JAR_FILE=target/*.jar

      # Trivy security scanner for Docker images
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Start Spring Boot application
        run: |
          mvn spring-boot:run -Dspring-boot.run.profiles=performance &
          sleep 60  # Wait for application to start
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpass

      - name: Install JMeter
        run: |
          wget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.6.2.tgz
          tar -xzf apache-jmeter-5.6.2.tgz

      - name: Run JMeter performance tests
        run: |
          ./apache-jmeter-5.6.2/bin/jmeter -n -t performance-tests/load-test.jmx \
            -l performance-results.jtl -e -o performance-report

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            performance-results.jtl
            performance-report/

  # Job 7: Notification and Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, docker-build, performance-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add smoke test commands here

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 Successfully deployed to staging environment!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 8: Final Notifications
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, integration-tests, security-scan, docker-build]
    if: always()

    steps:
      - name: Notify success
        if: ${{ needs.build-and-test.result == 'success' && needs.code-quality.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Java Spring Boot CI Pipeline completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: ${{ contains(needs.*.result, 'failure') }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Java Spring Boot CI Pipeline failed. Please check the logs.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub Issue on failure
        if: ${{ contains(needs.*.result, 'failure') && github.ref == 'refs/heads/main' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI Pipeline Failed - ${context.sha.substring(0, 7)}`,
              body: `The CI pipeline failed for commit ${context.sha}.\n\n**Branch:** ${context.ref}\n**Workflow:** ${context.workflow}\n**Run:** ${context.runId}`,
              labels: ['bug', 'ci-failure']
            })