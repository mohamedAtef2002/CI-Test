name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m -Dmaven.project.sourceRoots.warningsDisabled=true'

# Global permissions
permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write
  actions: read

jobs:
  # 1Ô∏è‚É£ Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Verify setup
        run: |
          echo "üîç Environment Information:"
          echo "Java version: $(java -version 2>&1 | head -1)"
          echo "Maven version: $(mvn --version | head -1)"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "Maven opts: $MAVEN_OPTS"

      - name: Build project
        run: |
          mvn -B clean compile \
            -Dmaven.compiler.source=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.release=${{ env.JAVA_VERSION }} \
            -Dmaven.project.sourceRoots.warningsDisabled=true

      - name: Run tests with coverage
        run: |
          mvn -B test jacoco:report \
            -Dmaven.compiler.source=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.release=${{ env.JAVA_VERSION }} \
            -Dmaven.project.sourceRoots.warningsDisabled=true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            target/surefire-reports/*.xml
          check_name: "Test Results"
          comment_mode: create new

      - name: Add coverage to PR
        uses: madrapps/jacoco-report@v1.6.1
        if: github.event_name == 'pull_request'
        with:
          paths: |
            ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 70
          min-coverage-changed-files: 70
          title: "Code Coverage Report"

      - name: Package application
        run: |
          mvn -B package -DskipTests \
            -Dmaven.compiler.source=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.release=${{ env.JAVA_VERSION }} \
            -Dmaven.project.sourceRoots.warningsDisabled=true

      - name: Extract version
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Application Version: $VERSION"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/*.jar
            target/site/jacoco/
          retention-days: 7

      - name: Build Summary
        if: always()
        run: |
          echo "## üìä Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Java Version | ${{ env.JAVA_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Application Version | ${{ steps.version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f target/surefire-reports/TEST-*.xml ]; then
            echo "| Test Reports | ‚úÖ Generated |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Test Reports | ‚ùå Not Found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f target/site/jacoco/jacoco.xml ]; then
            echo "| Coverage Report | ‚úÖ Generated |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Coverage Report | ‚ùå Not Found |" >> $GITHUB_STEP_SUMMARY
          fi

  # 2Ô∏è‚É£ Code Quality Analysis (Optional)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.actor != 'dependabot[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target/

      - name: Check SonarCloud configuration
        id: sonar-check
        run: |
          if [ -n "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "sonar_enabled=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SonarCloud token found - analysis will run"
          else
            echo "sonar_enabled=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è SonarCloud token not found - skipping analysis"
            echo "To enable SonarCloud:"
            echo "1. Go to https://sonarcloud.io"
            echo "2. Create a project for your repository"
            echo "3. Add SONAR_TOKEN to GitHub repository secrets"
          fi

      - name: Run SonarCloud analysis
        if: steps.sonar-check.outputs.sonar_enabled == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B sonar:sonar \
            -Dmaven.project.sourceRoots.warningsDisabled=true \
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }} \
            -Dsonar.organization=${{ github.repository_owner }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Run basic code analysis (without SonarCloud)
        if: steps.sonar-check.outputs.sonar_enabled == 'false'
        run: |
          echo "üîç Running basic code analysis..."
          
          # Count lines of code
          echo "## üìà Code Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          JAVA_FILES=$(find src -name "*.java" | wc -l)
          JAVA_LINES=$(find src -name "*.java" -exec cat {} \; | wc -l)
          TEST_FILES=$(find src/test -name "*.java" 2>/dev/null | wc -l || echo "0")
          
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Java Files | $JAVA_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "| Lines of Code | $JAVA_LINES |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Files | $TEST_FILES |" >> $GITHUB_STEP_SUMMARY
          
          echo "‚úÖ Basic code analysis completed"

  # 3Ô∏è‚É£ Security Scan (Simplified)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Check if SARIF file exists
        id: sarif-check
        run: |
          if [ -f trivy-results.sarif ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SARIF file generated successfully"
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è SARIF file not generated"
          fi

      - name: Upload Trivy scan results (if file exists)
        if: steps.sarif-check.outputs.sarif_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Security summary
        run: |
          echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Scanner**: Trivy" >> $GITHUB_STEP_SUMMARY
          echo "- **Scope**: Filesystem dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- **Severity**: CRITICAL, HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- **SARIF Upload**: ${{ steps.sarif-check.outputs.sarif_exists == 'true' && '‚úÖ Success' || '‚ö†Ô∏è Skipped' }}" >> $GITHUB_STEP_SUMMARY

  # 4Ô∏è‚É£ Docker Build and Push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker Hub credentials
        id: docker-check
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "docker_enabled=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Docker Hub credentials found"
          else
            echo "docker_enabled=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Docker Hub credentials not found"
            echo "To enable Docker push, add DOCKERHUB_USERNAME and DOCKERHUB_TOKEN to repository secrets"
          fi

      - name: Log in to Docker Hub
        if: steps.docker-check.outputs.docker_enabled == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME || 'myapp' }}/myapp
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.build-and-test.outputs.version }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "üß™ Testing Docker image..."
          docker run --rm ${{ secrets.DOCKERHUB_USERNAME || 'myapp' }}/myapp:latest --version || true

      - name: Push Docker image
        if: steps.docker-check.outputs.docker_enabled == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Docker summary
        run: |
          echo "## üê≥ Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image Built | ‚úÖ Yes |" >> $GITHUB_STEP_SUMMARY
          echo "| Pushed to Registry | ${{ steps.docker-check.outputs.docker_enabled == 'true' && '‚úÖ Yes' || '‚ö†Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Platforms | linux/amd64, linux/arm64 |" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ needs.build-and-test.outputs.version }} |" >> $GITHUB_STEP_SUMMARY