name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'

# Global permissions for the workflow
permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write
  actions: read

jobs:
  # 1️⃣ Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Verify Java and Maven setup
        run: |
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn --version
          echo "JAVA_HOME: $JAVA_HOME"

      - name: Build project
        run: |
          mvn -B clean compile \
            -Dmaven.compiler.source=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.release=${{ env.JAVA_VERSION }}

      - name: Run tests
        run: |
          mvn -B test \
            -Dmaven.compiler.source=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.release=${{ env.JAVA_VERSION }}

      - name: Generate test report and coverage
        run: |
          mvn jacoco:report

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            target/surefire-reports/*.xml

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1
        if: github.event_name == 'pull_request'
        with:
          paths: |
            ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 70
          min-coverage-changed-files: 70

      - name: Package application
        run: |
          mvn -B package -DskipTests \
            -Dmaven.compiler.source=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
            -Dmaven.compiler.release=${{ env.JAVA_VERSION }}

      - name: Extract version
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/*.jar
            target/site/jacoco/
          retention-days: 7

      - name: Display test summary
        if: always()
        run: |
          echo "## Test Summary 📊" >> $GITHUB_STEP_SUMMARY
          if [ -f target/surefire-reports/TEST-*.xml ]; then
            echo "✅ Test reports generated successfully" >> $GITHUB_STEP_SUMMARY
            echo "📁 Reports location: target/surefire-reports/" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No test reports found" >> $GITHUB_STEP_SUMMARY
          fi

  # 2️⃣ Code Quality Analysis
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.actor != 'dependabot[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target/

      - name: Run SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -z "$SONAR_TOKEN" ]; then
            echo "⚠️ SONAR_TOKEN not set, skipping SonarCloud analysis"
            echo "To enable SonarCloud, set SONAR_TOKEN in repository secrets"
          else
            mvn -B verify sonar:sonar \
              -Dmaven.compiler.source=${{ env.JAVA_VERSION }} \
              -Dmaven.compiler.target=${{ env.JAVA_VERSION }} \
              -Dmaven.compiler.release=${{ env.JAVA_VERSION }} \
              -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }} \
              -Dsonar.organization=${{ github.repository_owner }} \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
          fi

  # 3️⃣ Security Scan
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        env:
          MAVEN_OPTS: '-Dmaven.compiler.source=${{ env.JAVA_VERSION }} -Dmaven.compiler.target=${{ env.JAVA_VERSION }}'

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 4️⃣ Docker Build and Push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/myapp
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.build-and-test.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on image
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy image scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'

      - name: Image build summary
        run: |
          echo "## Docker Build Summary 🐳" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ needs.build-and-test.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Push**: ${{ github.event_name != 'pull_request' }}" >> $GITHUB_STEP_SUMMARY